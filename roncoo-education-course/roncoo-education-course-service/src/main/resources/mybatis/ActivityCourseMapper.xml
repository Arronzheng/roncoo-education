<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.roncoo.education.course.service.dao.impl.mapper.ActivityCourseMapper">

        <!-- 通用查询映射结果 -->
        <resultMap id="BaseResultMap" type="com.roncoo.education.course.service.dao.impl.mapper.entity.ActivityCourse">
            <id column="id" property="id" jdbcType="BIGINT"/>
            <result column="gmt_create" property="gmtCreate" jdbcType="TIMESTAMP"/>
            <result column="gmt_modified" property="gmtModified" jdbcType="TIMESTAMP"/>
            <result column="status_id" property="statusId" jdbcType="TINYINT"/>
            <result column="sort" property="sort" jdbcType="INTEGER"/>
            <result column="activity_id" property="activityId" jdbcType="BIGINT"/>
            <result column="activity_location" property="activityLocation" jdbcType="TINYINT"/>
            <result column="course_id" property="courseId" jdbcType="BIGINT"/>
            <result column="activity_category" property="activityCategory" jdbcType="INTEGER"/>
            <result column="course_price" property="coursePrice" jdbcType="DECIMAL"/>
            <result column="group_num" property="groupNum" jdbcType="INTEGER"/>
            <result column="course_stock" property="courseStock" jdbcType="INTEGER"/>
            <result column="knife_num" property="knifeNum" jdbcType="INTEGER"/>
            <result column="limit_time" property="limitTime" jdbcType="INTEGER"/>
        </resultMap>

    <sql id="Example_Where_Clause" >
        <where >
            <foreach collection="oredCriteria" item="criteria" separator="or" >
                <if test="criteria.valid" >
                    <trim prefix="(" suffix=")" prefixOverrides="and" >
                        <foreach collection="criteria.criteria" item="criterion" >
                            <choose >
                                <when test="criterion.noValue" >
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue" >
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue" >
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue" >
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause" >
        <where >
            <foreach collection="example.oredCriteria" item="criteria" separator="or" >
                <if test="criteria.valid" >
                    <trim prefix="(" suffix=")" prefixOverrides="and" >
                        <foreach collection="criteria.criteria" item="criterion" >
                            <choose >
                                <when test="criterion.noValue" >
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue" >
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue" >
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue" >
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
        <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, gmt_create, gmt_modified, status_id, sort, activity_id, activity_location, course_id, activity_category, course_price, group_num, course_stock, knife_num, limit_time
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.roncoo.education.course.service.dao.impl.mapper.entity.ActivityCourseExample">
        select
            <if test="distinct" >
                distinct
            </if>
            <include refid="Base_Column_List" />
        from activity_course
            <if test="_parameter != null" >
                <include refid="Example_Where_Clause" />
            </if>
            <if test="orderByClause != null" >
                order by ${orderByClause}
            </if>
            <if test="limitStart >= 0" >
                limit ${limitStart} , ${pageSize}
            </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
        select
            <include refid="Base_Column_List" />
        from activity_course
        where
        id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
        delete from activity_course
        where
        id = #{id,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByExample" parameterType="com.roncoo.education.course.service.dao.impl.mapper.entity.ActivityCourseExample" >
        delete from activity_course
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
    </delete>
    <insert id="insert" parameterType="com.roncoo.education.course.service.dao.impl.mapper.entity.ActivityCourse" >
        insert into activity_course
        (
         id, gmt_create, gmt_modified, status_id, sort, activity_id, activity_location, course_id, activity_category, course_price, group_num, course_stock, knife_num, limit_time
        ) values (
            #{id,jdbcType=BIGINT},
            #{gmtCreate,jdbcType=TIMESTAMP},
            #{gmtModified,jdbcType=TIMESTAMP},
            #{statusId,jdbcType=TINYINT},
            #{sort,jdbcType=INTEGER},
            #{activityId,jdbcType=BIGINT},
            #{activityLocation,jdbcType=TINYINT},
            #{courseId,jdbcType=BIGINT},
            #{activityCategory,jdbcType=INTEGER},
            #{coursePrice,jdbcType=DECIMAL},
            #{groupNum,jdbcType=INTEGER},
            #{courseStock,jdbcType=INTEGER},
            #{knifeNum,jdbcType=INTEGER},
            #{limitTime,jdbcType=INTEGER},
        )
    </insert>
    <insert id="insertSelective" parameterType="com.roncoo.education.course.service.dao.impl.mapper.entity.ActivityCourse" >
        insert into activity_course
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="gmtCreate != null" >
                gmt_create,
            </if>
            <if test="gmtModified != null" >
                gmt_modified,
            </if>
            <if test="statusId != null" >
                status_id,
            </if>
            <if test="sort != null" >
                sort,
            </if>
            <if test="activityId != null" >
                activity_id,
            </if>
            <if test="activityLocation != null" >
                activity_location,
            </if>
            <if test="courseId != null" >
                course_id,
            </if>
            <if test="activityCategory != null" >
                activity_category,
            </if>
            <if test="coursePrice != null" >
                course_price,
            </if>
            <if test="groupNum != null" >
                group_num,
            </if>
            <if test="courseStock != null" >
                course_stock,
            </if>
            <if test="knifeNum != null" >
                knife_num,
            </if>
            <if test="limitTime != null" >
                limit_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=BIGINT},
            </if>
            <if test="gmtCreate != null" >
                #{gmtCreate,jdbcType=TIMESTAMP},
            </if>
            <if test="gmtModified != null" >
                #{gmtModified,jdbcType=TIMESTAMP},
            </if>
            <if test="statusId != null" >
                #{statusId,jdbcType=TINYINT},
            </if>
            <if test="sort != null" >
                #{sort,jdbcType=INTEGER},
            </if>
            <if test="activityId != null" >
                #{activityId,jdbcType=BIGINT},
            </if>
            <if test="activityLocation != null" >
                #{activityLocation,jdbcType=TINYINT},
            </if>
            <if test="courseId != null" >
                #{courseId,jdbcType=BIGINT},
            </if>
            <if test="activityCategory != null" >
                #{activityCategory,jdbcType=INTEGER},
            </if>
            <if test="coursePrice != null" >
                #{coursePrice,jdbcType=DECIMAL},
            </if>
            <if test="groupNum != null" >
                #{groupNum,jdbcType=INTEGER},
            </if>
            <if test="courseStock != null" >
                #{courseStock,jdbcType=INTEGER},
            </if>
            <if test="knifeNum != null" >
                #{knifeNum,jdbcType=INTEGER},
            </if>
            <if test="limitTime != null" >
                #{limitTime,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.roncoo.education.course.service.dao.impl.mapper.entity.ActivityCourseExample" resultType="java.lang.Integer" >
        select count(*) from activity_course
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map" >
        update activity_course
        <set >
            <if test="record.id != null" >
                id = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="record.gmtCreate != null" >
                gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.gmtModified != null" >
                gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
            </if>
            <if test="record.statusId != null" >
                status_id = #{record.statusId,jdbcType=TINYINT},
            </if>
            <if test="record.sort != null" >
                sort = #{record.sort,jdbcType=INTEGER},
            </if>
            <if test="record.activityId != null" >
                activity_id = #{record.activityId,jdbcType=BIGINT},
            </if>
            <if test="record.activityLocation != null" >
                activity_location = #{record.activityLocation,jdbcType=TINYINT},
            </if>
            <if test="record.courseId != null" >
                course_id = #{record.courseId,jdbcType=BIGINT},
            </if>
            <if test="record.activityCategory != null" >
                activity_category = #{record.activityCategory,jdbcType=INTEGER},
            </if>
            <if test="record.coursePrice != null" >
                course_price = #{record.coursePrice,jdbcType=DECIMAL},
            </if>
            <if test="record.groupNum != null" >
                group_num = #{record.groupNum,jdbcType=INTEGER},
            </if>
            <if test="record.courseStock != null" >
                course_stock = #{record.courseStock,jdbcType=INTEGER},
            </if>
            <if test="record.knifeNum != null" >
                knife_num = #{record.knifeNum,jdbcType=INTEGER},
            </if>
            <if test="record.limitTime != null" >
                limit_time = #{record.limitTime,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByExample" parameterType="map" >
        update activity_course
        set
            id = #{record.id,jdbcType=BIGINT},
            gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
            gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
            status_id = #{record.statusId,jdbcType=TINYINT},
            sort = #{record.sort,jdbcType=INTEGER},
            activity_id = #{record.activityId,jdbcType=BIGINT},
            activity_location = #{record.activityLocation,jdbcType=TINYINT},
            course_id = #{record.courseId,jdbcType=BIGINT},
            activity_category = #{record.activityCategory,jdbcType=INTEGER},
            course_price = #{record.coursePrice,jdbcType=DECIMAL},
            group_num = #{record.groupNum,jdbcType=INTEGER},
            course_stock = #{record.courseStock,jdbcType=INTEGER},
            knife_num = #{record.knifeNum,jdbcType=INTEGER},
            limit_time = #{record.limitTime,jdbcType=INTEGER},
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.roncoo.education.course.service.dao.impl.mapper.entity.ActivityCourse" >
        update activity_course
        <set >
                <if test="gmtCreate != null" >
                    gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
                </if>
                <if test="gmtModified != null" >
                    gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
                </if>
                <if test="statusId != null" >
                    status_id = #{statusId,jdbcType=TINYINT},
                </if>
                <if test="sort != null" >
                    sort = #{sort,jdbcType=INTEGER},
                </if>
                <if test="activityId != null" >
                    activity_id = #{activityId,jdbcType=BIGINT},
                </if>
                <if test="activityLocation != null" >
                    activity_location = #{activityLocation,jdbcType=TINYINT},
                </if>
                <if test="courseId != null" >
                    course_id = #{courseId,jdbcType=BIGINT},
                </if>
                <if test="activityCategory != null" >
                    activity_category = #{activityCategory,jdbcType=INTEGER},
                </if>
                <if test="coursePrice != null" >
                    course_price = #{coursePrice,jdbcType=DECIMAL},
                </if>
                <if test="groupNum != null" >
                    group_num = #{groupNum,jdbcType=INTEGER},
                </if>
                <if test="courseStock != null" >
                    course_stock = #{courseStock,jdbcType=INTEGER},
                </if>
                <if test="knifeNum != null" >
                    knife_num = #{knifeNum,jdbcType=INTEGER},
                </if>
                <if test="limitTime != null" >
                    limit_time = #{limitTime,jdbcType=INTEGER},
                </if>
        </set>
        where
                id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.roncoo.education.course.service.dao.impl.mapper.entity.ActivityCourse" >
        update activity_course
        set
                gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
                gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
                status_id = #{statusId,jdbcType=TINYINT},
                sort = #{sort,jdbcType=INTEGER},
                activity_id = #{activityId,jdbcType=BIGINT},
                activity_location = #{activityLocation,jdbcType=TINYINT},
                course_id = #{courseId,jdbcType=BIGINT},
                activity_category = #{activityCategory,jdbcType=INTEGER},
                course_price = #{coursePrice,jdbcType=DECIMAL},
                group_num = #{groupNum,jdbcType=INTEGER},
                course_stock = #{courseStock,jdbcType=INTEGER},
                knife_num = #{knifeNum,jdbcType=INTEGER},
                limit_time = #{limitTime,jdbcType=INTEGER},
        where
        id = #{id,jdbcType=BIGINT}
  </update>
</mapper>